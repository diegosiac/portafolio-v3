---
import SunIcon from "@/icons/sun.astro"
import MoonIcon from "@/icons/moon.astro"

import { DARK_THEME, LIGHT_THEME } from "@/consts"
---

<button
	id="themeToggle"
	class="inline-flex overflow-hidden rounded px-4 py-1 text-primary-inactive hover:font-black hover:text-primary motion-safe:transition"
>
	<SunIcon
		class="block animate-slide-in-bottom motion-safe:transition-transform dark:hidden"
		style="animation-duration: 0.2s"
	/>

	<MoonIcon
		class="hidden motion-safe:transition-transform motion-safe:duration-0 dark:block dark:animate-slide-in-top"
		style="animation-duration: 0.2s"
	/>
	<span class="sr-only"></span>
</button>

<script
	is:inline
	define:vars={{ darkTheme: DARK_THEME, lightTheme: LIGHT_THEME }}
>
	function handleToggleClick() {
		const element = document.documentElement
		element.classList.toggle(darkTheme)

		const isDark = element.classList.contains(darkTheme)
		localStorage.setItem("theme", isDark ? darkTheme : lightTheme)

		updateThemeMessage(isDark)
	}

	function updateThemeMessage(theme) {
		const translation = theme ? "oscuro" : "claro"
		const actualThemeMsg = `Alternar tema, el tema actual es ${translation}`
		const span = document.querySelector("span.sr-only")
		span.innerHTML = actualThemeMsg

		window.dispatchEvent(new Event("theme-changed"))
	}

	const handleThemePreferenceChange = (e) => {
		const isDark = document.documentElement.classList.contains("dark")
		const toggle = (e.matches && !isDark) || (!e.matches && isDark)
		if (toggle) handleToggleClick()
	}

	document.addEventListener("astro:page-load", () => {
		const darkModePreference = window.matchMedia("(prefers-color-scheme: dark)")
		darkModePreference.addEventListener("change", handleThemePreferenceChange)
		darkModePreference.addListener(handleThemePreferenceChange) // backward compatibility

		document
			.getElementById("themeToggle")
			.addEventListener("click", handleToggleClick)

		updateThemeMessage(window.getThemePreference())
	})
</script>
