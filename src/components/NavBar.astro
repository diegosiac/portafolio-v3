---
import NavLink from "./NavLink.astro"
import ThemeToggle from "./ThemeToggle.astro"

interface Links {
	name: string
	url: string
	label: string
}

const links: Links[] = [
	{
		name: "Portafolio",
		label: "Portafolio",
		url: "/",
	},
	{
		name: "Contacto",
		label: "Contacto",
		url: "/contact",
	},
	{
		name: "Blog",
		label: "Blog",
		url: "/blog",
	},
]
---

<header
	id="landing-header"
	class="fixed left-1/2 top-5 z-40 flex w-min -translate-x-1/2 items-center rounded-md p-1 text-primary"
>
	<nav>
		<ul
			class="flex text-primary-inactive [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-1 [&>li>a]:font-medium [&>li>a]:transition-colors [&>li>a]:duration-500 [&>li>a]:motion-safe:transition"
		>
			{
				links.map(({ label, name, url }) => (
					<li>
						<NavLink href={url} aria-label={label}>
							{name}
						</NavLink>
					</li>
				))
			}
			<li>
				<ThemeToggle />
			</li>
		</ul>
	</nav>

	<span
		id="menu-backdrop"
		class="absolute left-0 top-0 -z-10 h-[var(--height)] w-[var(--width)] translate-x-[var(--left)] translate-y-[var(--top)] rounded bg-secondary opacity-0 backdrop-blur-lg transition-all duration-500 ease-in-out"
	>
	</span>
</header>

<style>
	#landing-header {
		animation: header linear both;
		animation-timeline: scroll();
		animation-range: 0 500px;
	}

	@keyframes header {
		to {
			background-color: var(--color-primary-blur);
			backdrop-filter: blur(12px);
		}
	}
</style>

<script>
	document.addEventListener("astro:page-load", () => {
		const ladingHeader = document.querySelector(
			"#landing-header"
		) as HTMLHeadElement
		const listItem = document.querySelectorAll(
			"#landing-header li"
		) as NodeListOf<HTMLLIElement>
		const menuBackDrop = document.querySelector(
			"#menu-backdrop"
		) as HTMLSpanElement

		listItem.forEach((item) => {
			item.addEventListener("mouseenter", () => {
				const { left: leftHeader, top: topHeader } =
					ladingHeader.getBoundingClientRect()
				const { left, top, width, height } = item.getBoundingClientRect()

				menuBackDrop.style.setProperty("--left", `${left - leftHeader}px`)
				menuBackDrop.style.setProperty("--top", `${top - topHeader}px`)
				menuBackDrop.style.setProperty("--width", `${width}px`)
				menuBackDrop.style.setProperty("--height", `${height}px`)

				menuBackDrop.style.opacity = "1"
				menuBackDrop.style.visibility = "visible"
			})

			item.addEventListener("mouseleave", () => {
				menuBackDrop.style.opacity = "0"
				menuBackDrop.style.visibility = "hidden"
			})
		})
	})
</script>
